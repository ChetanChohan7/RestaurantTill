// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestaurantTill.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("001-RestaurantTill")]
    public partial class _001_RestaurantTillFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "001-RestaurantTill.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "001-RestaurantTill", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("001-Validate till calculates total cost with no starters")]
        public virtual void _001_ValidateTillCalculatesTotalCostWithNoStarters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("001-Validate till calculates total cost with no starters", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table1.AddRow(new string[] {
                        "0",
                        "4"});
#line 4
 testRunner.Given("I have the following order reciept", ((string)(null)), table1, "Given ");
#line 7
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table2.AddRow(new string[] {
                        "28.0"});
#line 8
 testRunner.Then("I can calculate the total cost", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("002-Validate till calculates total cost with no mains")]
        public virtual void _002_ValidateTillCalculatesTotalCostWithNoMains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("002-Validate till calculates total cost with no mains", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table3.AddRow(new string[] {
                        "4",
                        "0"});
#line 13
 testRunner.Given("I have the following order reciept", ((string)(null)), table3, "Given ");
#line 16
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table4.AddRow(new string[] {
                        "17.6"});
#line 17
 testRunner.Then("I can calculate the total cost", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("003-Validate till calculates total cost with both starters and mains")]
        public virtual void _003_ValidateTillCalculatesTotalCostWithBothStartersAndMains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("003-Validate till calculates total cost with both starters and mains", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table5.AddRow(new string[] {
                        "4",
                        "6"});
#line 22
 testRunner.Given("I have the following order reciept", ((string)(null)), table5, "Given ");
#line 25
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table6.AddRow(new string[] {
                        "59.6"});
#line 26
 testRunner.Then("I can calculate the total cost", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("004-Validate till calculates total cost with no starters and no mains")]
        public virtual void _004_ValidateTillCalculatesTotalCostWithNoStartersAndNoMains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("004-Validate till calculates total cost with no starters and no mains", null, ((string[])(null)));
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table7.AddRow(new string[] {
                        "0",
                        "0"});
#line 31
 testRunner.Given("I have the following order reciept", ((string)(null)), table7, "Given ");
#line 34
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table8.AddRow(new string[] {
                        "0"});
#line 35
 testRunner.Then("I can calculate the total cost", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("005-Validate till calculates total cost")]
        [NUnit.Framework.TestCaseAttribute("0", "4", "28.0", null)]
        [NUnit.Framework.TestCaseAttribute("4", "0", "17.6", null)]
        [NUnit.Framework.TestCaseAttribute("4", "6", "59.6", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0", null)]
        public virtual void _005_ValidateTillCalculatesTotalCost(string starters, string mains, string total, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("005-Validate till calculates total cost", null, exampleTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 41
 testRunner.Given(string.Format("I have {0} starter courses and {1} main courses", starters, mains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then(string.Format("the calculated total cost will be {0}", total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("006-Validate till calculates total cost when updated to remove starters")]
        public virtual void _006_ValidateTillCalculatesTotalCostWhenUpdatedToRemoveStarters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("006-Validate till calculates total cost when updated to remove starters", null, ((string[])(null)));
#line 51
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table9.AddRow(new string[] {
                        "2",
                        "2"});
#line 52
 testRunner.Given("I have the following order reciept", ((string)(null)), table9, "Given ");
#line 55
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table10.AddRow(new string[] {
                        "22.8"});
#line 56
 testRunner.Then("I can calculate the total cost", ((string)(null)), table10, "Then ");
#line 59
 testRunner.When("I update to remove 2 starters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("the new total cost will be 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("007-Validate till calculates total cost when updated to remove mains")]
        public virtual void _007_ValidateTillCalculatesTotalCostWhenUpdatedToRemoveMains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("007-Validate till calculates total cost when updated to remove mains", null, ((string[])(null)));
#line 62
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table11.AddRow(new string[] {
                        "2",
                        "2"});
#line 63
 testRunner.Given("I have the following order reciept", ((string)(null)), table11, "Given ");
#line 66
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table12.AddRow(new string[] {
                        "22.8"});
#line 67
 testRunner.Then("I can calculate the total cost", ((string)(null)), table12, "Then ");
#line 70
 testRunner.When("I update to remove 2 mains", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the new total cost will be 8.8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("008-Validate till calculates total cost when updated to add starters")]
        public virtual void _008_ValidateTillCalculatesTotalCostWhenUpdatedToAddStarters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("008-Validate till calculates total cost when updated to add starters", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table13.AddRow(new string[] {
                        "2",
                        "2"});
#line 74
 testRunner.Given("I have the following order reciept", ((string)(null)), table13, "Given ");
#line 77
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table14.AddRow(new string[] {
                        "22.8"});
#line 78
 testRunner.Then("I can calculate the total cost", ((string)(null)), table14, "Then ");
#line 81
 testRunner.When("I update to add 1 starters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("the new total cost will be 27.2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("009-Validate till calculates total cost when updated to add mains")]
        public virtual void _009_ValidateTillCalculatesTotalCostWhenUpdatedToAddMains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("009-Validate till calculates total cost when updated to add mains", null, ((string[])(null)));
#line 84
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Starters",
                        "Mains"});
            table15.AddRow(new string[] {
                        "2",
                        "2"});
#line 85
 testRunner.Given("I have the following order reciept", ((string)(null)), table15, "Given ");
#line 88
 testRunner.When("I am at the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Total"});
            table16.AddRow(new string[] {
                        "22.8"});
#line 89
 testRunner.Then("I can calculate the total cost", ((string)(null)), table16, "Then ");
#line 92
 testRunner.When("I update to add 1 mains", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("the new total cost will be 29.8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

